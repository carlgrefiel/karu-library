{"version":3,"file":"index.js","sources":["../src/components/UtilsV2.js"],"sourcesContent":["const today = new Date();\r\nexport const currentDateComponent = today.toISOString().split(\"T\")[0];\r\nconst dateSpit = currentDateComponent.split(\"-\");\r\nexport const currentDateComponentStr = `${dateSpit[1]}${dateSpit[2]}${dateSpit[0]}`;\r\n\r\nexport const currentTimestamp = () => {\r\n  const currentDateTime = new Date(); // Get current date and time\r\n  const localDateTime = new Date(\r\n    currentDateTime.getTime() - currentDateTime.getTimezoneOffset() * 60000\r\n  ); // Adjust for local timezone\r\n  const timestamp = localDateTime.toISOString().slice(0, 19).replace(\"T\", \" \");\r\n\r\n  return timestamp;\r\n};\r\n\r\nexport const convertToText = (str) => {\r\n  return str\r\n    .split(\"_\") // Split the string by underscores\r\n    .join(\" \"); // Join the words with spaces\r\n};\r\n\r\nexport const verifyPassword = (password) => {\r\n  // verify password and return true if all validation is meant\r\n  const validationsPassword = {\r\n    hasUpperCase: (value) => /[A-Z]/.test(value),\r\n    hasLowerCase: (value) => /[a-z]/.test(value),\r\n    hasNumber: (value) => /\\d/.test(value),\r\n    hasSpecialChar: (value) => /[@$!%*?&]/.test(value),\r\n    minLength: (value) => value.length >= 8,\r\n  };\r\n  return (\r\n    validationsPassword.hasUpperCase(password) &&\r\n    validationsPassword.hasLowerCase(password) &&\r\n    validationsPassword.hasNumber(password) &&\r\n    validationsPassword.hasSpecialChar(password) &&\r\n    validationsPassword.minLength(password)\r\n  );\r\n};\r\n"],"names":["today","Date","currentDateComponent","toISOString","split","dateSpit","currentDateComponentStr","concat","currentTimestamp","currentDateTime","localDateTime","getTime","getTimezoneOffset","timestamp","slice","replace","convertToText","str","join","verifyPassword","password","validationsPassword","hasUpperCase","value","test","hasLowerCase","hasNumber","hasSpecialChar","minLength","length"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAG,IAAIC,IAAI,EAAE,CAAA;AACXC,IAAAA,oBAAoB,GAAGF,KAAK,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC;AACrE,IAAMC,QAAQ,GAAGH,oBAAoB,CAACE,KAAK,CAAC,GAAG,CAAC,CAAA;AACzC,IAAME,uBAAuB,GAAAC,EAAAA,CAAAA,MAAA,CAAMF,QAAQ,CAAC,CAAC,CAAC,CAAAE,CAAAA,MAAA,CAAGF,QAAQ,CAAC,CAAC,CAAC,CAAAE,CAAAA,MAAA,CAAGF,QAAQ,CAAC,CAAC,CAAC,EAAE;IAEtEG,gBAAgB,GAAG,SAAnBA,gBAAgBA,GAAS;AACpC,EAAA,IAAMC,eAAe,GAAG,IAAIR,IAAI,EAAE,CAAC;EACnC,IAAMS,aAAa,GAAG,IAAIT,IAAI,CAC5BQ,eAAe,CAACE,OAAO,EAAE,GAAGF,eAAe,CAACG,iBAAiB,EAAE,GAAG,KACpE,CAAC,CAAC;EACF,IAAMC,SAAS,GAAGH,aAAa,CAACP,WAAW,EAAE,CAACW,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;AAE5E,EAAA,OAAOF,SAAS,CAAA;AAClB,EAAC;IAEYG,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,GAAG,EAAK;AACpC,EAAA,OAAOA,GAAG,CACPb,KAAK,CAAC,GAAG,CAAC;AAAC,GACXc,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,EAAC;IAEYC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,QAAQ,EAAK;AAC1C;AACA,EAAA,IAAMC,mBAAmB,GAAG;AAC1BC,IAAAA,YAAY,EAAE,SAAdA,YAAYA,CAAGC,KAAK,EAAA;AAAA,MAAA,OAAK,OAAO,CAACC,IAAI,CAACD,KAAK,CAAC,CAAA;AAAA,KAAA;AAC5CE,IAAAA,YAAY,EAAE,SAAdA,YAAYA,CAAGF,KAAK,EAAA;AAAA,MAAA,OAAK,OAAO,CAACC,IAAI,CAACD,KAAK,CAAC,CAAA;AAAA,KAAA;AAC5CG,IAAAA,SAAS,EAAE,SAAXA,SAASA,CAAGH,KAAK,EAAA;AAAA,MAAA,OAAK,IAAI,CAACC,IAAI,CAACD,KAAK,CAAC,CAAA;AAAA,KAAA;AACtCI,IAAAA,cAAc,EAAE,SAAhBA,cAAcA,CAAGJ,KAAK,EAAA;AAAA,MAAA,OAAK,WAAW,CAACC,IAAI,CAACD,KAAK,CAAC,CAAA;AAAA,KAAA;AAClDK,IAAAA,SAAS,EAAE,SAAXA,SAASA,CAAGL,KAAK,EAAA;AAAA,MAAA,OAAKA,KAAK,CAACM,MAAM,IAAI,CAAC,CAAA;AAAA,KAAA;GACxC,CAAA;AACD,EAAA,OACER,mBAAmB,CAACC,YAAY,CAACF,QAAQ,CAAC,IAC1CC,mBAAmB,CAACI,YAAY,CAACL,QAAQ,CAAC,IAC1CC,mBAAmB,CAACK,SAAS,CAACN,QAAQ,CAAC,IACvCC,mBAAmB,CAACM,cAAc,CAACP,QAAQ,CAAC,IAC5CC,mBAAmB,CAACO,SAAS,CAACR,QAAQ,CAAC,CAAA;AAE3C;;;;;;;;"}